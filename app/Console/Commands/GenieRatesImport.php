<?php

namespace App\Console\Commands;

use PhpParser\Node\Expr\Print_;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Cache;
use Illuminate\Console\Command;
use DateTime;
use Carbon\Carbon;
use App\Models\VendorRate;
use App\Models\Vendor;
use App\Models\Utility;
use App\Models\Rate;
use App\Models\Product;

class GenieRatesImport extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'Genie:RatesImport {--brand=} {--scripts-file=} {--offers-file=} {--dry-run} {--limit=} {--output-rates} {--export-errors} {--email-to=}';

    /**
     * The name of the automated job.
     *
     * @var string
     */
    protected $jobName = 'Genie Retail Energy - Rates Import';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = "IDT/Residents Energy rate import process \n"
        . "\n"
        . " The import is processed in five stages: \n"
        . "   1) If --startover is specified, delete existing products/rates for selected vendor \n"
        . "   2) Import and format scripts and offers files \n"
        . "   3) Combine scripts and offers data \n"
        . "   4) Insert records into database \n"
        . "\n"
        . " --brand:         The brand to process the import for. Valid values: IDTE, RES \n"
        . " --scripts-file:  The scripts file to import. \n"
        . " --offers-file:   The offers file to import. \n"
        . " --dry-run:       Prevents database modifications. Used this to test a rate imports. \n"
        . " --limit:         Limit the number of offers inserted in the database. This only affects stage 4 of the import process. \n"
        . " --output-rates:  After stage 3 is done, outputs the combined records to a CSV file. \n"
        . " --export-errors: After stage 3 is done, outputs any scripts file and/or offers file validation errors to CSV files. \n"
        . " --email-to:      Emails and deletes files generated by --output-rates and --export-errors instead of leaving them on the server.";

    /**
     * Brand identifier
     *
     * @var string
     */
    protected $brandId = '';

    /**
     * Brand Name
     *
     * @var string
     */
    protected $brand = '';

    /**
     * Limit how many rates are imported
     */
    protected $importLimit = 0; // 0 = no limit

    /**
     * List of utilities for brand.
     */
    protected $utilityList = null;

    /**
     * Email distro, set by --email-to option
     */
    protected $emailDistro = [];

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        ini_set('auto_detect_line_endings', true);

        $response = $this->newResult();

        // Check brand
        if ($this->option('brand')) {
            $this->brand = $this->option('brand');

            switch (strtoupper($this->brand)) {
                case 'IDTE':
                    $this->brandId = '77c6df91-8384-45a5-8a17-3d6c67ed78bf'; // IDT/Residents IDs are the same between staging and prod envs.
                    break;

                case 'RES':
                    $this->brandId = '0e80edba-dd3f-4761-9b67-3d4a15914adb';
                    break;

                default:
                    $this->error('Unrecognized brand: ' . $this->brand);

                    return $this->newResult('error', 'Unrecognized brand ID');
            }
        } else {
            $this->error("Invalid signature. Syntax:\n\n"
                . $this->signature . "\n\n"
                . $this->description);

            return $this->newResult('error', 'Invalid signature');
        }

        // Check for other required options
        if (!$this->option('scripts-file') || !$this->option('offers-file')) {
            $this->error("Invalid signature. Syntax:\n\n"
                . $this->signature . "\n\n"
                . $this->description);

            return $this->newResult('error', 'Invalid signature');
        }

        if ($this->option('email-to')) {
            $this->emailDistro[] = $this->option('email-to');
        }

        $scriptsFile = $this->option('scripts-file');
        $ratesFile = $this->option('offers-file');
        $zonesFile = 'idt_energy_state_utility_zones.json';

        $scriptsData = '';
        $offersData = '';

        // Check for limit
        if ($this->option('limit')) {
            $this->importLimit = ($this->option('limit') < 1 ? 0 : floor($this->option('limit')));
        }

        // Expected header in scripts file
        $scriptsFileHeader = $this->flipKeysAndValues([
            'State',
            'Rate Type',
            'Energy Type',
            'ServiceClass',
            'ETF',
            'Campaign Name',
            'Electric Verbiage English',
            'Gas Verbiage English',
            'Electric Verbiage Spanish',
            'Gas Verbiage Spanish',
        ]);

        // Expected header in offers matrix
        $offersFileHeader = $this->flipKeysAndValues([
            'Brand',
            'OfferID',
            'OfferDescription',
            'Rate 1',
            'Fee',
            'Term 1',
            'Rate 2',
            'Term 2',
            'ETF',
            'Utility',
            'Commodity',
            'Zone',
            'ServiceClass',
            'EnergyType',
            'RateType',
            'OfferStartDate',
            'OfferEndDate',
            'LegalText',
            'Campaign',
        ]);

        // Files exist?
        if (!file_exists($scriptsFile)) {
            $this->error('The file ' . $scriptsFile . ' does not exist.');

            return $this->newResult('error', 'Unable to locate scripts file');
        }
        if (!file_exists($ratesFile)) {
            $this->error('The file ' . $ratesFile . ' does not exist.');

            return $this->newResult('error', 'Unable to locate offers file');
        }

        // Import zones file. Used to determine sales state for offers matrix.
        $this->info('Importing zones file...');
        $zonesData = json_decode(file_get_contents('resources/js/' . $zonesFile));

        // Import offers matrix file
        $this->info('Importing offers matrix file...');
        $importResult = $this->importCsvFile($ratesFile, $offersFileHeader);
        if ($importResult['result'] == 'success') {
            $offersData = $importResult['message'];
        } else {
            $this->error('Rates file import error: ' . $importResult['message']);

            return $importResult;
        }
        $this->info('    Records Imported: ' . count($offersData));

        // Format offer matrix data
        $this->info('Formatting offers matrix...');
        $offersData = $this->formatOffersMatrix($offersData, $offersFileHeader, $zonesData);

        // Import scripts file
        $this->info('Importing scripts file...');
        $importResult = $this->importCsvFile($scriptsFile, $scriptsFileHeader);
        if ($importResult['result'] == 'success') {
            $scriptsData = $importResult['message'];
        } else {
            $this->error('Scripts file import error: ' . $importResult['message']);

            return $importResult;
        }
        $this->info('    Records Imported: ' . count($scriptsData));

        // The State and Campaign Name fields in the script file may contain more than one
        // value. Break them out in to separate rows.
        // NOTE: This will also change the array's index names.
        $this->info('Formatting scripts data...');
        $scriptsData = $this->formatScriptsData($scriptsData, $scriptsFileHeader);
        $this->info('    New scripts count: ' . count($scriptsData));

        // Check scripts array against rate data, noting any scripts records that cannot be
        // matched to an offer.
        $this->info('Checking scripts data that cannot be matched to an offer...');
        foreach ($scriptsData as $key => $script) {
            $found = false;

            foreach ($offersData as $offer) {
                if (
                    trim(strtolower($offer['Campaign'])) == trim(strtolower($script['campaign_name'])) &&
                    trim(strtolower($offer['Brand'])) == trim(strtolower($script['brand'])) &&
                    trim(strtolower($offer['sales_state'])) == trim(strtolower($script['state'])) &&
                    trim(strtolower($offer['RateType'])) == trim(strtolower($script['rate_type'])) &&
                    trim(strtolower($offer['EnergyType'])) == trim(strtolower($script['energy_type'])) &&
                    trim(strtolower($offer['Commodity'])) == trim(strtolower($script['commodity']))
                ) {
                    $found = true;
                    break;
                }
            }

            if (!$found) {
                $scriptsData[$key]['error_message'] = 'No utilities found for this campaign, state and commodity on offer matrix file';
                $response['result'] = 'error';

                array_push($response['scriptsFileErrors'], [
                    'state' => $script['state'],
                    'rate_type' => $script['rate_type'],
                    'energy_type' => $script['energy_type'],
                    'commodity' => $script['commodity'],
                    'service_class' => $script['service_class'],
                    'etf' => $script['etf'],
                    'campaign' => $script['campaign_name'],
                    'brand' => $script['brand'],
                    'error_message' => $scriptsData[$key]['error_message'],
                ]);
            }
        }

        // Combine scripts and offers matrix data
        $this->info('Combining scripts and offers data...');

        $this->utilityList = $this->getUtilities();

        $nCurOffer = 1;
        foreach ($offersData as $key => $offer) {
            $errorMessage = $offer['error_message']; // grab value in case we need to append to any existing error messages.

            // Format brand name
            switch (strtoupper($offer['Brand'])) {
                case 'IDTE':
                    $offersData[$key]['Brand'] = 'IDT Energy';
                    break;

                case 'CCE':
                    $offersData[$key]['Brand'] = 'Citizens Choice Energy';
                    break;

                case 'RES':
                    $offersData[$key]['Brand'] = 'Residents Energy';
                    break;
            }

            // Format src code (Energy Type + Campaign Name)
            // Note from legacy program: Screens look in src_code for "green" and green verbiage terms of "SMARTBUDGET,FIXED,RESISURE"
            switch (strtoupper($offer['EnergyType'])) {
                case 'GREEN':
                    $offersData[$key]['src_code'] = 'GREEN' . '-' . $offer['Campaign'];
                    break;

                case 'BROWN':
                    $offersData[$key]['src_code'] = 'BROWN' . '-' . $offer['Campaign'];
                    break;
            }

            $offersData[$key]['promo_statement'] = $offer['Campaign'];
            $offersData[$key]['customer_type'] = $offer['ServiceClass'];

            // Find script
            $script = null;
            foreach ($scriptsData as $value) {
                if (
                    trim(strtolower($offer['Campaign'])) == trim(strtolower($value['campaign_name'])) &&
                    trim(strtolower($offer['Brand'])) == trim(strtolower($value['brand'])) &&
                    trim(strtolower($offer['sales_state'])) == trim(strtolower($value['state'])) &&
                    trim(strtolower($offer['RateType'])) == trim(strtolower($value['rate_type'])) &&
                    trim(strtolower($offer['EnergyType'])) == trim(strtolower($value['energy_type'])) &&
                    trim(strtolower($offer['Commodity'])) == trim(strtolower($value['commodity']))
                ) {
                    $script = $value;
                }
            }

            if (!$script) {
                $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . 'Could not find a matching rate script by campaign, brand, state, ratetype, energytype, commodity, and serclass';
            }

            // Hydrate tags in rate scripts
            $rateScriptEng = '';
            $rateScriptSpa = '';

            switch (strtoupper($script['commodity'])) {
                case 'E':
                    $offersData[$key]['util_type'] = 'ELE';

                    $rateScriptEng = $script['ele_script_eng'];
                    $rateScriptSpa = $script['ele_script_spa'];

                    break;

                case 'G':
                    $offersData[$key]['util_type'] = 'GAS';

                    $rateScriptEng = $script['gas_script_eng'];
                    $rateScriptSpa = $script['gas_script_spa'];

                    break;

                default:
                    $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . 'Invalid commodity or commodity is not set';
                    break;
            }

            // Format rate for use with the rate scripts. We're not messing with the original values.
            if ($offersData[$key]['Utility'] == 'CONSGAS' && strpos(strtoupper($rateScriptEng), 'MCF') !== false) { // Keep rate value as-is if Consumers Gas and UOM is MCF
                $rate1 = rtrim($offer['Rate 1']);
            } else {
                $rate1 = rtrim(strval(doubleval($offer['Rate 1']) * 100), '0');
            }
            $rate2 = rtrim(strval(doubleval($offer['Rate 2']) * 100), '0');

            $term1 = $offer['Term 1'];
            $term2 = $offer['Term 2']; // new tags introduced #22480
            $termTotal = (empty($offer['Term 1']) ? 0 : $offer['Term 1']) + (empty($offer['Term 2']) ? 0 : $offer['Term 2']);

            // Hydrate Tags in rate scripts
            if (substr_count($rateScriptEng, 'N/A') == 0 && substr_count($rateScriptSpa, 'N/A') == 0) { // make sure we have a rate script
                // Rate
                $rateScriptEng = str_replace('[insert rate]', ' ' . $rate1 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert rate]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[insert rate1]', ' ' . $rate1 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert rate1]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[insert rate 1]', ' ' . $rate1 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert rate 1]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[insert rate2]', ' ' . $rate2 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert rate2]', ' ' . $rate2 . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[insert rate 2]', ' ' . $rate2 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert rate 2]', ' ' . $rate2 . ' ', $rateScriptSpa);

                $rateScriptSpa = str_replace('[insertar tarifa]', ' ' . $rate1 . ' ', $rateScriptSpa); // also look for tags in Spanish
                $rateScriptSpa = str_replace('[insertar tarifa1]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tarifa 1]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tarifa2]', ' ' . $rate2 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tarifa 2]', ' ' . $rate2 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tasa]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tasa1]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tasa 1]', ' ' . $rate1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tasa2]', ' ' . $rate2 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar tasa 2]', ' ' . $rate2 . ' ', $rateScriptSpa);

                // Term
                $rateScriptEng = str_replace('[insert term]', ' ' . $term1 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert term]', ' ' . $term1 . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[insert term 1]', ' ' . $term1 . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[insert term 1]', ' ' . $term1 . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[insert term 2]', ' ' . $term2 . ' ', $rateScriptEng);  // new tags introduced #22480
                $rateScriptSpa = str_replace('[insert term 2]', ' ' . $term2 . ' ', $rateScriptSpa);  // new tags introduced #22480

                $rateScriptSpa = str_replace('[insertar termino]', ' ' . $term1 . ' ', $rateScriptSpa); // also look for tags in Spanish
                $rateScriptSpa = str_replace('[insertar término]', ' ' . $term1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar termino 1]', ' ' . $term1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar término 1]', ' ' . $term1 . ' ', $rateScriptSpa);
                $rateScriptSpa = str_replace('[insertar termino 2]', ' ' . $term2 . ' ', $rateScriptSpa);  // new tags introduced #22480
                $rateScriptSpa = str_replace('[insertar término 2]', ' ' . $term2 . ' ', $rateScriptSpa);  // new tags introduced #22480

                $rateScriptEng = str_replace('[add term 1 plus term 2]', ' ' . $termTotal . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[add term 1 plus term 2]', ' ' . $termTotal . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[añadir termino 1 más término 2]', ' ' . $termTotal . ' ', $rateScriptEng);
                $rateScriptSpa = str_replace('[añadir termino 1 más término 2]', ' ' . $termTotal . ' ', $rateScriptSpa);
                $rateScriptEng = str_replace('[añadir termino 1 mas termino 2]', ' ' . $termTotal . ' ', $rateScriptEng);  // new tags introduced #22480
                $rateScriptSpa = str_replace('[añadir termino 1 mas termino 2]', ' ' . $termTotal . ' ', $rateScriptSpa);  // new tags introduced #22480

                $offersData[$key]['rate_script_eng'] = $rateScriptEng;
                $offersData[$key]['rate_script_spa'] = $rateScriptSpa;

                // Check for Cents per kWh in rate scripts
                if ($script['state'] != 'IL') { // Ignore IL. Price/Units(?) are hard coded for IL (note from legacy import program)
                    if (substr_count($rateScriptEng, 'per kWh') > 0 && substr_count($rateScriptEng, 'cents per kWh') == 0) {
                        $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . 'Missing CENTS in English verbiage';
                    }
                    if (substr_count($rateScriptSpa, 'por kilovatio-hora') > 0 && substr_count($rateScriptSpa, 'centavos por kilovatio-hora') == 0) {
                        $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . 'Missing CENTAVOS in Spanish verbiage';
                    }
                }

                // Check for [ or ]. Shouldn't be any left after tag hydration
                if (substr_count($rateScriptEng, '[') > 0 || substr_count($rateScriptEng, ']') > 0) {
                    $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . '[ or ] encountered in English verbiage. Check for unrecognized tags';
                }
                if (substr_count($rateScriptSpa, '[') > 0 || substr_count($rateScriptSpa, ']') > 0) {
                    $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . '[ or ] encountered in Spanish verbiage. Check for unrecognized tags';
                }
            } else {
                $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . 'Rate script required, but N/A provided';
            }

            // Check if utility record exists
            //$this->info('   Verifying utility...');
            $uLookup = $this->lookupUtility($this->utilityList, $offer['sales_state'], $offer['Utility'], (strtolower($offer['Commodity']) == 'e' ? 1 : 2));
            if ($uLookup == null) { // Should never be null here as we're also running this check when formatting data, but just in case...
                $com = (strtolower($offer['Commodity']) === 'e') ? 'Electric' : 'Gas';
                $errorMessage .= (empty($errorMessage) ? '' : ' ~~ ') . 'Unable to determine Utility. State: ' . $offer['sales_state'] . ', LDC code: ' . $offer['Utility'] . ', Fuel Type: ' . $com;
            }

            // Update record with any new error messages
            $offersData[$key]['error_message'] = $errorMessage;

            // Check for error and update handler result accordingly
            if (!empty($errorMessage)) {
                $response['result'] = 'error';
                array_push($response['offersFileErrors'], [
                    'brand' => $offersData[$key]['Brand'],
                    'offer_id' => $offersData[$key]['OfferID'],
                    'commodity' => $offersData[$key]['Commodity'],
                    'serivce_class' => $offersData[$key]['ServiceClass'],
                    'energy_type' => $offersData[$key]['EnergyType'],
                    'rate_type' => $offersData[$key]['RateType'],
                    'campaign' => $offersData[$key]['Campaign'],
                    'sales_state' => $offersData[$key]['sales_state'],
                    'error_message' => $errorMessage,
                ]);
            }

            // update status 'bar'. Reports every hundred.
            if ($nCurOffer % 100 == 0) {
                print_r('. ');
            }

            $nCurOffer++;
        }

        print_r(". Done!\n");

        $attachments = []; // Build attachments list, in case --email-to is specified

        // Export file containing combined offers and scripts
        if ($this->option('output-rates')) {
            $this->info('Exporting combined rates...');
            $file = fopen('combinated_rates_' . $this->brand . '.csv', 'w');

            fputcsv($file, [
                'Brand', 'OfferID', 'OfferDescription', 'Rate 1', 'Fee', 'Term 1', 'Rate 2', 'Term2', 'ETF', 'Utility', 'Commodity',
                'Zone', 'ServiceClass', 'EnergyType', 'RateType', 'OfferStartDate', 'OfferEndDate', 'LegalText', 'Campaign',
                'active', 'sales_state', 'src_code', 'customer_type', 'vendor', 'brand_name', 'promo_statement', 'util_name',
                'util_code', 'util_type', 'trans_type', 'program', 'rate_script_eng', 'rate_script_spa', 'dt_added', 'added_by',
                'dt_deactiv', 'deactiv_by', 'auth_by', 'dt_import', 'import_by', 'dt_export', 'export_by', 'dt_update', 'update_by',
                'error_message',
            ]);

            foreach ($offersData as $offer) {
                fputcsv($file, $offer);
            }
            fclose($file);

            $attachments[] = 'combinated_rates_' . $this->brand . '.csv';
        }

        // Export errors
        if ($this->option('export-errors')) {
            // scripts
            if (count($response['scriptsFileErrors']) > 0) {
                $this->info('Found scripts errors. Exporting...');
                $file = fopen('scripts_errors_' . $this->brand . '.csv', 'w');

                fputcsv($file, ['state', 'rate_type', 'energy_type', 'commodity', 'service_class', 'etf', 'campaign', 'brand', 'error_message']);

                foreach ($response['scriptsFileErrors'] as $row) {
                    fputcsv($file, $row);
                }
                fclose($file);

                $attachments[] = 'scripts_errors_' . $this->brand . '.csv';
            }

            // offers
            if (count($response['offersFileErrors']) > 0) {
                $this->info('Found offers errors. Exporting...');
                $file = fopen('offers_errors_' . $this->brand . '.csv', 'w');

                fputcsv($file, ['brand', 'offer_id', 'commodity', 'service_class', 'energy_type', 'rate_type', 'campaign', 'sales_state', 'error_message']);

                foreach ($response['offersFileErrors'] as $row) {
                    fputcsv($file, $row);
                }
                fclose($file);

                $attachments[] = 'offers_errors_' . $this->brand . '.csv';
            }
        }

        // Email files
        if ($this->emailDistro) {
            $this->info('Emailing combined rates/error files...');

            $emailResult = $this->sendEmail('Combined rate export and/or error files attached.', $this->emailDistro, $attachments);

            if (strpos($emailResult[0], 'Status: Success!')) {
                $this->info('  Done. Deleting emailed files from server...');

                foreach ($attachments as $file) {
                    unlink($file);
                }
                $this->info('  Done!');
            } else {
                $this->info('  Failed. Proceeding to next step...');

                $this->info('failed to email combined rates/error files.'); // This doesn't stop the import process. Don't quit import.
            }
        }

        // Quit if errors were encountered
        if (
            count($response['scriptsFileErrors']) > 0 ||
            count($response['offersFileErrors']) > 0
        ) {
            $this->info('Errors encountered in scripts and/or offers file.');
            $this->info('Quitting without inserting records into DB...');

            return $this->newResult('error', 'Errors encountered in scripts and/or offers file. Quitting withing inserting records into DB...');
        }

        // Write data to SQL
        $this->info('-------------------------------');
        $rateInsert = $this->insertRates($offersData);

        if ($rateInsert['result'] != 'success') {
            $response['message'] = $rateInsert['message'];
        }

        return $response;
    }

    /**
     * Retrieve utility list.
     *
     * @return array
     */
    public function getUtilities()
    {
        $usf = Utility::select(
            'utilities.name AS utility_name',
            'brand_utilities.utility_label',
            'states.state_abbrev AS state',
            'utility_supported_fuels.utility_fuel_type_id',
            'utility_supported_fuels.id'
        )->leftJoin(
            'utility_supported_fuels',
            'utilities.id',
            'utility_supported_fuels.utility_id'
        )->leftJoin(
            'brand_utilities',
            'utilities.id',
            'brand_utilities.utility_id'
        )->leftJoin(
            'states',
            'utilities.state_id',
            'states.id'
        )->where(
            'brand_utilities.brand_id',
            $this->brandId
            // )->where(
            //     'states.state_abbrev',
            //     $salesState
            // )->where(
            //     'brand_utilities.utility_label',
            //     $ldcCode
            // )->where(
            //     'utility_supported_fuels.utility_fuel_type_id',
            //     $fuel_type
        )->whereNull(
            'utility_supported_fuels.deleted_at'
        )->whereNull(
            'utilities.deleted_at'
        )->whereNull(
            'brand_utilities.deleted_at'
        )->get();

        if (!$usf) {
            return null;
        }

        return $usf;
    }

    /**
     * Lookup Utility.
     */
    public function lookupUtility($utilties, $salesState, $ldcCode, $fuel_type)
    {
        if (!$utilties) {
            return null;
        }

        if ( // Handle oddball sales state values provided by IDT...
            strtoupper($salesState) == 'MI_CONSUMER' ||
            strtoupper($salesState) == 'MI_DTE'
        ) {
            $salesState = 'MI';
        }

        foreach ($utilties as $util) {
            if (
                strtolower($util->state) == strtolower($salesState) &&
                strtolower($util->utility_label) == strtolower($ldcCode) &&
                strtolower($util->utility_fuel_type_id) == strtolower($fuel_type)
            ) {
                return [
                    'id' => $util->id,
                    'state_name' => $util->state,
                    'utility_name' => $util->utility_name,
                ];
            }
        }

        return null;
    }

    /**
     * Performs SQL data insert from rates array.
     */
    private function insertRates($offers)
    {
        date_default_timezone_set('America/Chicago');
        $opStart = new DateTime();
        $brand_id = $this->brandId;

        $util_not_found = [];
        $vendor_list = [];

        $importCounter = 0;

        // Delete existing products and rates for this brand
        if (!$this->option('dry-run')) {
            $this->info('Deleting existing ' . $this->brand . ' products');

            $products = Product::where('brand_id', $brand_id)->get();

            foreach ($products as $product) {
                Rate::where('product_id', $product->id)->withTrashed()->update(
                    [
                        'hidden' => 1,
                    ]
                );
                Rate::where('product_id', $product->id)->delete();
                VendorRate::where('product_id', $product->id)->delete();

                $product->delete();
            }
        }

        $this->info('Inserting rates...');
        foreach ($offers as $offer) {
            $rateStart = new DateTime();

            $importCounter = ++$importCounter;

            // Check for import limit and quit if reached
            if ($this->importLimit > 0 && $importCounter > $this->importLimit) {
                $this->info('Import limit of ' . $this->importLimit . ' record(s) reached. Quitting early');
                break;
            }

            $this->info($importCounter . ' of ' . count($offers));
            $this->info(date('Y/m/d H:i:s')); // show current time

            $this->info('   Program Code: ' . $offer['OfferID']);
            $this->info('   State:        ' . $offer['sales_state']);
            $this->info('   Utility:      ' . $offer['Utility']);
            $this->info('   Genie Product Name: ' . $offer['Campaign']);

            $ldc_code = @$offer['Utility'];
            $commodity = @$offer['Commodity'];
            $vendors_allowed = 'all';

            $this->info('   Determining commodity ID...');
            switch (strtolower($commodity)) {
                case 'e':
                    $fuel = 1;
                    break;
                case 'g':
                    $fuel = 2;
                    break;
                default:
                    $this->error('Fuel Type must be one of electric (E) or gas (G); (' . ($commodity) . ') given.');

                    $result['result'] = 'error';
                    $result['message'] = 'Fuel Type must be one of electric (E) or gas (G); (' . ($commodity) . ') given.';

                    return $result;
            }

            $this->info('   Utility ID lookup...');
            $uLookup = $this->lookupUtility($this->utilityList, $offer['sales_state'], $ldc_code, $fuel);
            if ($uLookup == null) { // Should never be null here as we're also running this check when formatting data, but just in case...
                $com = ($fuel === 1) ? 'Electric' : 'Gas';
                $this->error('Unable to determine Utility. State: ' . $offer['sales_state'] . ', LDC code: ' . $ldc_code . ', Fuel Type: ' . $com);

                return $this->newResult('error', 'Unable to determine Utility. State: ' . $offer['sales_state'] . ', LDC code: ' . $ldc_code . ', Fuel Type: ' . $com);
            }

            $utility_id = $uLookup['id'];
            if (null === $utility_id) {
                $utility = trim($ldc_code);
                $util_not_found[] = $utility;
            }

            if ('all' != $vendors_allowed) {
                $vendor_list[] = $vendors_allowed;
            }

            $vendors = Cache::remember(
                'vendor_rate_import' . $brand_id,
                60,
                function () use ($brand_id) {
                    return Vendor::select(
                        'vendors.id',
                        'brands.name'
                    )->leftJoin(
                        'brands',
                        'brands.id',
                        'vendors.vendor_id'
                    )->where(
                        'brand_id',
                        $brand_id
                    )->get();
                }
            );

            if (count($util_not_found) > 0) {
                $this->info('Missing utilities found:');
                foreach (array_unique($util_not_found) as $value) {
                    $this->info(' -- ' . $value);
                }

                return $this->newResult('error', 'Missing utilities found.');
            }

            // Determine Commodity
            $this->info('   Determine commodity...');
            switch (strtolower($offer['Commodity'])) {
                case 'e':
                    $fuel = 1;
                    break;
                case 'g':
                    $fuel = 2;
                    break;
                default:
                    $this->error('Fuel Type must be one of electric (E) or gas (G); ('
                        . strtolower($offer['Commodity']) . ') given.');

                    return $this->newResult('error', 'Invalid fuel type. "e" or "g" expected; "' . strtolower($offer['Commodity']) . '" provided');
            }

            // Determine Rate Type
            $this->info('   Determine rate type...');
            switch (strtolower($offer['RateType'])) {
                case 'fixed':
                    $rate_type_id = 1;
                    break;
                case 'variable':
                    $rate_type_id = 2;
                    break;
                case 'tiered':
                    $rate_type_id = 3;
                    break;

                default:
                    $this->info('Rate type should be one of: Fixed,Variable,Tiered');
                    $this->error('Unknown rate type: ' . $offer['RateType']);

                    return $this->newResult('error', 'Unknown rate type: ' . $offer['RateType']);
            }

            $term_type_id = 3;

            $intro_term_type_id = $term_type_id; // IDT doesn't have intro terms. Use term_type_id

            // code to make an assumption of kWh for elec, and CCF for gas.
            $this->info('   Determine UOM...');
            //$rate_uom_id = 3;
            $rate_uom_id = (strtolower($commodity) == 'e' ? 2 : 4); // Start of by assigning kWh or CCF based on fuel type

            // Now check the rate script to see what UOM is actually being used. If none are found, keep the above value.
            if (strpos(strtolower($offer['rate_script_eng']), 'kwh')) {
                $rate_uom_id = 2;
            } else if (strpos(strtolower($offer['rate_script_eng']), 'ccf')) {
                $rate_uom_id = 4;
            } else if (strpos(strtolower($offer['rate_script_eng']), 'mcf')) {
                $rate_uom_id = 7;
            } else if (strpos(strtolower($offer['rate_script_eng']), 'gj')) {
                $rate_uom_id = 6;
            } else if (strpos(strtolower($offer['rate_script_eng']), 'therm')) {
                $rate_uom_id = 1;
            }

            $rate_currency_id = 2; // Dollars

            // Check if product exists
            // There should only be rates for one state associated to each product.
            // Since IDT has rates in multiple states tied to he same product, split them out
            // but added the state to the product name
            $productName = $offer['Campaign'] . ' - ' . $offer['sales_state'];

            // Default channel is TM. Any products with 'General' in the name are DTD|TM
            $channel = "TM";

            $promoCode = null;
            $dualOnly = 0;

            if (strpos(strtolower($productName), "cinchdual")) { // Must look for this first to avoid false positives for CINCH
                $promoCode = "CINCHDUAL";
                $dualOnly = 1;
            } else if (strpos(strtolower($productName), "cinch")) {
                $promoCode = "CINCH";
            } else if (strpos(strtolower($productName), "hvac")) {
                $promoCode = "HVAC";
            } else if (strpos(strtolower($productName), "plumbing")) {
                $promoCode = "PLUMBING";
            }

            $idteProdName = strtolower($offer['Campaign']);

            if (strpos($idteProdName, 'general') !== false) {
                $channel = 'DTD|TM';

                // If OH and not Winback, also add 'Retail' channel
                if(strpos($idteProdName, 'd2d winback') === false && strtoupper($offer['sales_state']) == 'OH') {
                    $channel .= '|Retail';
                }
            }

            if (strpos($idteProdName, 'd2d winback') !== false) {
                $channel = 'DTD|TM';
            }

            $this->info("   Channel: " . $channel);
            $this->info("   Promo Code: " . $promoCode);
            $this->info("   Dual Only: " . ($dualOnly == 1 ? "Yes" : "No"));

            $this->info('   Product lookup...');
            $product = Product::where(
                'name',
                $productName
            )->where(
                'brand_id',
                $brand_id
            );

            if (empty($offer['Term 1'])) {
                $product = $product->whereNull(
                    'term'
                );
            } else {
                $product = $product->where(
                    'term',
                    $offer['Term 1']
                );
            }

            $product = $product->where(
                'term_type_id',
                $term_type_id
            )->where(
                'intro_term_type_id',
                $intro_term_type_id
            )->where(
                'channel',
                $channel
            );


            if (empty($offer['ServiceClass'])) {
                $product = $product->whereNull(
                    'market'
                );
            } else {
                $product = $product->where(
                    'market',
                    $offer['ServiceClass']
                );
            }

            $product = $product->where(
                'home_type',
                'N/A'
            )->where(
                'rate_type_id',
                $rate_type_id
            )->where(
                'green_percentage',
                (strtolower($offer['EnergyType']) == 'green' ? '100' : '')
            )->orderBy('created_at', 'desc')->withTrashed()->first();

            // If it exists use it, else create it.
            if ($product && !$this->option('dry-run')) { // For dry runs, we always want to run the else case, to test field mappings
                $this->info('   Found. Restoring existing record...');
                $product->restore();
            } else {
                if ($this->option('verbose')) {
                    $this->info('Adding product: ' . $productName);
                }
                $this->info('   Not found. Creating...');

                $product = new Product();
                $product->brand_id = $brand_id;
                $product->name = $productName;
                $product->channel = $channel;
                $product->market = !empty($offer['ServiceClass'])
                    ? $offer['ServiceClass']
                    : null;
                $product->home_type = 'N/A'; // IDT doesn't deal with home types
                $product->rate_type_id = $rate_type_id;
                $product->green_percentage = (strtolower($offer['EnergyType']) == 'green' ? '100' : '');
                $product->term = !empty($offer['Term 1'])
                    ? $offer['Term 1']
                    : null;
                $product->term_type_id = $term_type_id;
                $product->service_fee = null; // There's a fee field in the matrix file, but it's never used.
                $product->transaction_fee = null;
                $product->transaction_fee_currency_id = null;
                $product->intro_term = null;
                $product->intro_term_type_id = $intro_term_type_id;
                $product->date_from = null;
                $product->date_to = null;

                if (!$this->option('dry-run')) {
                    $this->info('     Saving product...');
                    $product->save();
                } else {
                    $this->info('     Dry run. Product not saved.');
                }
            }

            $this->info('   Utility lookup (again?)...');
            $uLookup = $this->lookupUtility($this->utilityList, $offer['sales_state'], $ldc_code, $fuel);
            if ($uLookup == null) {
                $this->error('Unable to determine Utility for LDC code : ' . $ldc_code . ' for fuel type: ' . $fuel);

                return $this->newResult('error', 'Unable to determine Utility for LDC code: ' . $ldc_code . ' for fuel type: ' . $fuel);
            }

            $rate = null;

            $this->info('   Rate lookup...');
            $rate = Rate::where(
                'product_id',
                $product->id
            )->where(
                'program_code',
                $offer['OfferID']
            )->where(
                'utility_id',
                $uLookup['id']
            )->where(
                'rate_currency_id',
                $rate_currency_id
            )->where(
                'rate_uom_id',
                $rate_uom_id
            );


            if (strtolower($offer['sales_state']) == 'ct' && strtolower($offer['ETF']) == 'yes') {
                $rate = $rate->where(
                    'cancellation_fee',
                    '50'
                );
            } else {
                $rate = $rate->whereNull(
                    'cancellation_fee'
                );
            }

            $rate = $rate->where(
                'rate_source_code',
                $offer['src_code']
            );

            if (!empty($promoCode)) {
                $rate = $rate->where(
                    'rate_promo_code',
                    $promoCode
                );
            } else {
                $rate = $rate->whereNull(
                    'rate_promo_code'
                );
            }

            if (!empty($offer['Rate 1']) && !empty($offer['Rate 2'])) { // Tiered rate
                $rate = $rate->where(
                    'intro_rate_amount',
                    trim($offer['Rate 1'])
                )->where(
                    'rate_amount',
                    trim($offer['Rate 2'])
                );
            } else { // Not a Tiered rate
                $rate = $rate->whereNull(
                    'intro_rate_amount'
                );

                if (empty($offer['Rate 1'])) {
                    $rate = $rate->whereNull(
                        'rate_amount'
                    );
                } else {
                    $rate = $rate->where(
                        'rate_amount',
                        trim($offer['Rate 1'])
                    );
                }
            }

            $rate = $rate->where(
                'dual_only',
                $dualOnly
            )->where(
                'custom_data_1',
                $offer['Zone']
            )->orderBy('created_at', 'desc')->withTrashed()->first();

            if (!$rate || $this->option('dry-run')) { // For dry runs, we always want to create a new record, to test field mapping
                $this->info('   Not found. Creating...');

                $rate = new Rate();

                $rate->hidden = 0;
                $rate->product_id = $product->id;
                $rate->program_code = $offer['OfferID'];
                $rate->utility_id = $uLookup['id'];
                $rate->rate_currency_id = $rate_currency_id;
                $rate->rate_uom_id = $rate_uom_id;
                $rate->cancellation_fee = (strtolower($offer['sales_state']) == 'ct' && strtolower($offer['ETF']) == 'yes' ? '50' : null); // For CT where ETF = Yes, hard-code $50
                $rate->admin_fee = null;
                $rate->external_rate_id = null;
                $rate->rate_promo_code = $promoCode;
                $rate->rate_source_code = $offer['src_code'];
                $rate->rate_renewal_plan = null;
                $rate->rate_channel_source = null;

                if (!empty($offer['Rate 1']) && !empty($offer['Rate 2'])) { // Tiered rate
                    $rate->intro_rate_amount = trim($offer['Rate 1']);
                    $rate->rate_amount = trim($offer['Rate 2']);
                } else {
                    $rate->intro_rate_amount = null;
                    $rate->rate_amount = (!empty($offer['Rate 1']))
                        ? trim($offer['Rate 1'])
                        : null;
                }

                $rate->rate_monthly_fee = null;
                $rate->date_from = (Carbon::parse($offer['OfferStartDate']))
                    ? Carbon::parse($offer['OfferStartDate'])
                    : Carbon::now('America/Chicago');
                // $rate->date_to = (Carbon::parse($offer['OfferEndDate']))
                //     ? Carbon::parse($offer['OfferEndDate'])
                //     : Carbon::now('America/Chicago');
                $rate->date_to = null;
                $rate->dual_only = $dualOnly;
                $rate->custom_data_1 = $offer['Zone'];
                $rate->custom_data_2 = null;
                $rate->custom_data_3 = null;
                $rate->custom_data_4 = null;
                $rate->custom_data_5 = null;

                // rate scripts
                $rateScripts = [
                    'english' => [],
                    'spanish' => [],
                ];
                array_push($rateScripts['english'], $offer['rate_script_eng']);
                array_push($rateScripts['spanish'], $offer['rate_script_spa']);

                $rate->scripting = json_encode($rateScripts);

                if (!$this->option('dry-run')) {
                    $this->info('     Saving rate...');
                    $rate->save();
                } else {
                    $this->info('     Dry run. Rate not saved.');
                }
            } else {
                $this->info('   Found. Restoring existing record...');
                $rate->hidden = 0;
                $rate->restore();
            }

            // show durations
            $rateStop = new DateTime();

            $rateDiff = $rateStop->diff($rateStart);
            $opDiff = $rateStop->diff($opStart);

            $this->info('   Duration (current rate): ' . $rateDiff->format('%dd:%hh:%mm:%ss:%fms'));
            $this->info('   Duration (all inserts): ' . $opDiff->format('%dd:%hh:%mm:%ss:%fms'));
            $this->info("");
        }

        $this->info('Import complete');

        return $this->newResult('success');
    }

    /**
     * Import a CSV file.
     *
     * @return mixed
     */
    private function importCsvFile($file, $header)
    {
        if ($this->isUTF8($file) === false) {
            return $this->newResult('error', 'Error: files must be UTF-8 encoded');
        }

        // TODO: Check file extension?

        $csv = array();

        // Get the file's header row and validate it against the expected header values.
        $handle = fopen($file, 'r');

        $fileHeaders = fgetcsv($handle);
        if (!$this->validateHeaders($header, $fileHeaders)) {
            return $this->newResult('error', 'Unexpected header values in file "' . $file . '".');
        }

        // Import row data
        while (($data = fgetcsv($handle)) !== false) {
            array_push($csv, $data);
        }

        return $this->newResult('success', $csv); // csv content in 'message' property.
    }

    /**
     * Formats the script file data. Looks for rows with multiple State or Campaign Name values
     * and breaks them out in into separate rows.
     *
     * @return mixed
     */
    private function formatScriptsData($data, $header)
    {
        $formattedData = array();

        // Rate script records may contain grouped states and or campaigns. Split them all out into separate rows of data.
        foreach ($data as $row) {
            // Iterate values in State field
            $states = explode(';', $row[$header['State']]);
            foreach ($states as $state) {
                $state = trim($state);

                // Iterate values in Campaign Name field
                $campaigns = explode(';', $row[$header['Campaign Name']]);
                foreach ($campaigns as $campaign) {
                    $campaign = trim($campaign);

                    if ($campaign == '') { // ignore empty campaigns
                        continue;
                    }

                    $campaign = str_replace('û', '-', $campaign);
                    $campaign = str_replace(chr(150), '-', $campaign); // Also û?
                    $campaign = str_replace('–', '-', $campaign); // elongated hyphen

                    $eleVerbiageEng = trim(strtolower($row[$header['Electric Verbiage English']]));
                    $gasVerbiageEng = trim(strtolower($row[$header['Gas Verbiage English']]));

                    // Determine commodity, validate scripting, and insert row into new array.
                    if (substr_count($eleVerbiageEng, 'n/a') == 0) {
                        $newRow = [
                            'state' => $state,
                            'rate_type' => $row[$header['Rate Type']],
                            'energy_type' => $row[$header['Energy Type']],
                            'commodity' => 'E',
                            'service_class' => $row[$header['ServiceClass']],
                            'etf' => $row[$header['ETF']],
                            'campaign_name' => $campaign,
                            'ele_script_eng' => $row[$header['Electric Verbiage English']],
                            'gas_script_eng' => $row[$header['Gas Verbiage English']],
                            'ele_script_spa' => $row[$header['Electric Verbiage Spanish']],
                            'gas_script_spa' => $row[$header['Gas Verbiage Spanish']],
                            'brand' => $this->brand,
                            'error_message' => (empty($eleVerbiageEng) ? 'MISSING RATE SCRIPT' : ''),
                        ];

                        array_push($formattedData, $newRow);
                    }

                    if (substr_count($gasVerbiageEng, 'n/a') == 0) {
                        $newRow = [
                            'state' => $state,
                            'rate_type' => $row[$header['Rate Type']],
                            'energy_type' => $row[$header['Energy Type']],
                            'commodity' => 'G',
                            'service_class' => $row[$header['ServiceClass']],
                            'etf' => $row[$header['ETF']],
                            'campaign_name' => $campaign,
                            'ele_script_eng' => $row[$header['Electric Verbiage English']],
                            'gas_script_eng' => $row[$header['Gas Verbiage English']],
                            'ele_script_spa' => $row[$header['Electric Verbiage Spanish']],
                            'gas_script_spa' => $row[$header['Gas Verbiage Spanish']],
                            'brand' => $this->brand,
                            'error_message' => (empty($gasVerbiageEng) ? 'MISSING RATE SCRIPT' : ''),
                        ];

                        array_push($formattedData, $newRow);
                    }
                }
            }
        }

        return $formattedData;
    }

    /**
     * Format offers matrix.
     */
    private function formatOffersMatrix($data, $header, $zones)
    {
        $formattedData = array();

        foreach ($data as $key => $value) {
            // Determine state by looking up utility/commodity/zone in zones data.
            $state = '';
            $errorMessage = '';

            // Utility + Commodity Search
            foreach ($zones as $zoneKey => $zone) {
                if (
                    strtolower(trim($zone->utility)) == strtolower(trim($value[$header['Utility']])) &&
                    strtolower(trim($zone->commodity)) == strtolower(trim($value[$header['Commodity']]))
                ) {
                    $state = strtoupper(trim($zone->state));
                    break;
                }
            }

            if (!empty($value[$header['Zone']]) && strtolower($value[$header['Zone']]) !== 'n/a') {
                // Utility + Commodity + Zone search
                foreach ($zones as $zone) {
                    if (
                        strtolower(trim($zone->utility)) == strtolower(trim($value[$header['Utility']])) &&
                        strtolower(trim($zone->commodity)) == strtolower(trim($value[$header['Commodity']])) &&
                        strtolower(trim($zone->zone)) == strtolower(trim($value[$header['Zone']]))
                    ) {
                        $state = strtoupper(trim($zone->state));
                        break;
                    }
                }
            }

            if (empty($state)) {
                $errorMessage .= 'Unable to determine sales state.';
            }

            // Service class is typically Residential or Commercial, but can appear as NIMO_1 or NIMO_1C for NGU.
            // Translate those to Residential or Commericial.
            $serviceClass = $value[$header['ServiceClass']];

            if (
                strtoupper(trim($value[$header['Utility']])) == 'NGU' &&
                (strtoupper(trim($serviceClass)) == 'NIMO_1' || strtoupper(trim($serviceClass)) == 'NIMO_1C')
            ) {
                $serviceClass = 'Residential';
            } elseif (
                strtoupper(trim($value[$header['Utility']])) == 'NGU' &&
                strtoupper(trim($serviceClass)) != 'RESIDENTIAL' && strtoupper(trim($serviceClass)) != 'COMMERCIAL'
            ) {
                $serviceClass = 'Commercial';
            }

            // Fix special characters in campaign name.
            $campaign = $value[$header['Campaign']];
            $$campaign = str_replace('û', '-', $campaign); // û
            $campaign = str_replace(chr(150), '-', $campaign); // Also û?
            $campaign = str_replace('–', '-', $campaign); // elongated hyphen

            // Expand the array to include fields from rates table
            $newRow = [
                'Brand' => trim($value[$header['Brand']]),
                'OfferID' => trim($value[$header['OfferID']]),
                'OfferDescription' => trim($value[$header['OfferDescription']]),
                'Rate 1' => trim($value[$header['Rate 1']]),
                'Fee' => trim($value[$header['Fee']]),
                'Term 1' => trim($value[$header['Term 1']]),
                'Rate 2' => trim($value[$header['Rate 2']]),
                'Term 2' => trim($value[$header['Term 2']]),
                'ETF' => trim($value[$header['ETF']]),
                'Utility' => trim($value[$header['Utility']]),
                'Commodity' => trim($value[$header['Commodity']]),
                'Zone' => trim($value[$header['Zone']]),
                'ServiceClass' => $serviceClass,
                'EnergyType' => trim($value[$header['EnergyType']]),
                'RateType' => trim($value[$header['RateType']]),
                'OfferStartDate' => trim($value[$header['OfferStartDate']]),
                'OfferEndDate' => trim($value[$header['OfferEndDate']]),
                'LegalText' => trim($value[$header['LegalText']]),
                'Campaign' => $campaign,
                'active' => true,
                'sales_state' => $state,
                'src_code' => '',
                'customer_type' => '',
                'vendor' => '',
                'brand_name' => '',
                'promo_statement' => '',
                'util_name' => '',
                'util_code' => '',
                'util_type' => '',
                'trans_type' => '',
                'program' => '',
                'rate_script_eng' => '',
                'rate_script_spa' => '',
                'dt_added' => '',
                'added_by' => '',
                'dt_deactiv' => '',
                'deactiv_by' => '',
                'auth_by' => '',
                'dt_import' => '',
                'import_by' => '',
                'dt_export' => '',
                'export_by' => '',
                'dt_update' => '',
                'update_by' => '',
                'error_message' => $errorMessage,
            ];

            array_push($formattedData, $newRow);
        }

        return $formattedData;
    }

    /**
     * Validate a file's header row values against the expected header values.
     *
     * @return bool
     */
    private function validateHeaders($expectedHeaders, $fileHeaders)
    {
        if (count($expectedHeaders) != count($fileHeaders)) {
            return false;
        }

        // TODO: figure out why UTF-8 formatted CSV files have three extra bytes in the first header value.
        //       For now, remove them here.
        $h = str_split($fileHeaders[0]);
        $h = array_slice($h, 3); // new array, sans the first three bytes
        $h = implode('', $h);
        $fileHeaders[0] = $h;

        foreach ($expectedHeaders as $key => $value) {
            if ($fileHeaders[$value] != $key) {
                $this->info('EXPECTED:');
                print_r($expectedHeaders);
                $this->info('ACTUAL:');
                print_r($fileHeaders);

                return false;
            }
        }

        return true;
    }

    /**
     * Key's become values and values become keys. It's assumed that the values are unique.
     *
     * @return mixed
     */
    private function flipKeysAndValues($inputArray)
    {
        $tempArray = [];

        foreach ($inputArray as $key => $value) {
            $tempArray[trim($value)] = $key;
        }

        return $tempArray;
    }

    /**
     * Check's if a text file is encoded in UTF-8.
     *
     * @return bool
     */
    private function isUTF8($file)
    {
        $isUTF8 = true;

        if (function_exists('mb_detect_encoding')) {
            $encoding_check_file = file_get_contents($file);
            $isUTF8 = mb_detect_encoding($encoding_check_file, 'UTF-8', true);
            if ($isUTF8 === false) {
                $output_str = shell_exec('file --mime-encoding ' . $file);
                $output_str_a = explode(':', $output_str);
                if (count($output_str_a) > 1) {
                    if (trim($output_str_a[1]) == 'unknown-8bit') {
                        $iconv_out = shell_exec('iconv -f mac -t UTF-8 ' . $file . ' -o ' . $file . 'c');
                        $encoding_check_file = file_get_contents($file . 'c');
                        $isUTF8 = mb_detect_encoding($encoding_check_file, 'UTF-8', true);
                        if ($isUTF8) {
                            unlink($file);
                            $rate_file = $file . 'c';
                        }
                    }
                }
            }
        }

        return $isUTF8;
    }

    /**
     * Result object.
     */
    private function newResult($result = '', $message = '')
    {
        return [
            'result' => $result,
            'message' => $message,
            'scriptsFileErrors' => [], // list of errors in scripts file
            'offersFileErrors' => [], // list of errors in offers file
        ];
    }

    /**
     * Sends and email.
     *
     * @param string $message - Email body.
     * @param array  $distro  - Distribution list.
     * @param array  $files   - Optional. List of files to attach.
     *
     * @return string - Status message
     */
    public function sendEmail(string $message, array $distro, array $files = array())
    {
        $uploadStatus = [];
        $email_address = $distro;

        // Build email subject
        if ('production' != env('APP_ENV')) {
            $subject = $this->jobName . ' (' . env('APP_ENV') . ') '
                . Carbon::now();
        } else {
            $subject = $this->jobName . ' ' . Carbon::now();
        }

        $data = [
            'subject' => '',
            'content' => $message
        ];

        for ($i = 0; $i < count($email_address); ++$i) {
            $status = 'Email to ' . $email_address[$i]
                . ' at ' . Carbon::now() . '. Status: ';

            try {
                Mail::send(
                    'emails.generic',
                    $data,
                    function ($message) use ($subject, $email_address, $i, $files) {
                        $message->subject($subject);
                        $message->from('no-reply@tpvhub.com');
                        $message->to(trim($email_address[$i]));

                        // add attachments
                        foreach ($files as $file) {
                            $message->attach($file);
                        }
                    }
                );
            } catch (\Exception $e) {
                $status .= 'Error! The reason reported is: ' . $e;
                $uploadStatus[] = $status;
            }

            $status .= 'Success!';
            $uploadStatus[] = $status;
        }

        return $uploadStatus;
    }
}
